#!/usr/bin/env node

const checker = require('../license-checker');
const isValidLicense = require("spdx-expression-validate");
const isSatisfiedLicense = require("spdx-satisfies");
const correct = require('spdx-correct')
const path = require('path');

const start = ".";
const shouldDump = process.argv.includes('--csv');
const config = require(path.resolve(start, 'package.json'))['license-checker']
const {allow, override = {}} = config;
if (!allow) {
  console.error('Missing required "license-checker.allow" config in ./package.json');
  process.exit(1);
}

checker.init({
    start,
    excludePrivatePackages: true
}, function(err, packages) {
    if (err) {
      console.error(err);
      process.exit(1);
    } else {
      const infos = Object.entries(packages).map(([key, {licenses, repository, path}]) => {
        let licenseName = Array.isArray(licenses) ? licenses.join(' OR ') : licenses;
        const over = override[key];
        if (over && over.licenseName) {
          licenseName = over.licenseName;
        }
        if (licenseName.endsWith('*')) licenseName = licenseName.slice(0, -1);
        if (!isValidLicense(licenseName)) {
          licenseName = correct(licenseName)
        }
        if (!repository) repository = `https://www.npmjs.com/package/${key.replace(/(.)@/, '$1/v/')}`
        return {
          key, licenseName, repository, path
        }
      });
      if (shouldDump) {
        console.log(`"Name@Version","License","Url"`)
        infos.sort((a,b) => `${a.key}`.localeCompare(`${b.key}`)).map(({key, licenseName, repository}) => `"${key}","${licenseName}","${repository}"`).forEach(it => console.log(it))
      }
      const errors = getLicenseViolations(infos, allow)
      if (errors.length) {
        console.error(`License check errors:`, errors)
        process.exit(1);
      } else {
        process.exit(0);
      }
    }
});

const getLicenseViolations = (licenseInformation, allow) => {
  return licenseInformation.reduce((memo, { key, licenseName, path }) => {
    if (!licenseName || licenseName === "UNLICENSED") {
      memo.push(`${key} is unlicensed (${path})`);
    } else if (!isValidLicense(licenseName)) {
      memo.push(`${key} has invalid license ${licenseName} (${path})`);
    } else if (!isSatisfiedLicense(licenseName, allow)) {
      memo.push(`${key} has disallowed license ${licenseName} (${path})`);
    }
    return memo;
  }, []);
};
